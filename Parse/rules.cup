package Parse;

import java_cup.runtime.DefaultSymbolFactory;
import Absyn.*;

parser code {:
	Lexer lexer;
	public Parser(Lexer l) {
		lexer=l;
		this.symbolFactory = new DefaultSymbolFactory();
	}
:};

scan with {:
	java_cup.runtime.Symbol sym = lexer.nextToken();
    return (sym!=null) ? sym : getSymbolFactory().newSymbol("END_OF_FILE", EOF_sym());
:};


/* Terminal Symbols */
terminal INT, FLOAT;
terminal IF, ELSE, RETURN, WHILE, DO, FOR, SWITCH, CASE, DEFAULT, BREAK;
terminal MULT, DIV, PLUS, MINUS, GT, LT, GTEQ, LTEQ, EQEQ, NOTEQ, EQ;
terminal LPAREN, RPAREN, LBRACE, RBRACE, LBRACK, RBRACK, SEMICOLON, COLON, COMMA, DOT;
terminal UMINUS;
terminal id, intnum, floatnum;


/* Non-terminal Symbols */
non terminal Program;
non terminal DeclList, FuncList;
non terminal Declaration;
non terminal IdentList, identifier;
non terminal Function, ParamList;
non terminal Type;
non terminal StmtList, Stmt, AssignStmt, CallStmt, RetStmt, WhileStmt, ForStmt, IfStmt, SwitchStmt, CompoundStmt;
non terminal OpenStmt, ClosedStmt;
non terminal CaseCont, Default;
non terminal Assign, Call, CaseList, Expr, ArgList;


/* Precedence */
precedence right EQ;
precedence left EQEQ, NOTEQ;
precedence left GT, LT, GTEQ, LTEQ;
precedence left PLUS, MINUS;
precedence left MULT, DIV;
precedence left UMINUS;
precedence left LPAREN, RPAREN;
precedence right ELSE;


/* Production Rules */
Program ::=
		{: RESULT = new Program(null, null); :}
	|	DeclList:dl
		{:RESULT = new Program((DeclList) dl, null); :}
	|	FuncList:fl
		{: RESULT = new Program(null, (FuncList) fl); :}
	|	DeclList:dl FuncList:fl
		{: RESULT = new Program((DeclList) dl, (FuncList) fl); :}
	;

DeclList ::=
		Declaration:d
		{: DeclList dl = new DeclList(); dl.add((Decl) d); RESULT = dl; :}
	|	DeclList:dl Declaration:d
		{: ((DeclList) dl).add((Decl) d); RESULT = dl; :}
	;

FuncList ::=
		Function:f
		{: FuncList fl = new FuncList(); fl.add((Function) f); RESULT = fl; :}
	|	FuncList:fl Function:f
		{: ((FuncList) fl).add((Function) f); RESULT = fl; :}
	;

Declaration ::=
		Type:t IdentList:il SEMICOLON
		{: RESULT = new Decl(0, (Type) t, (IdentList) il); :}
	;

IdentList ::=
		identifier:i
		{: IdentList il = new IdentList(); il.add((Identifier) i); RESULT = il; :}
	|	IdentList:il COMMA identifier:i
		{: ((IdentList) il).add((Identifier) i); RESULT = il; :}
	;

identifier ::=
		id:i
		{: RESULT = new Identifier(0, (String) i); :}
	|	id:i LBRACK intnum:i2 RBRACK
		{: RESULT = new Identifier(0, (String) i, (Integer) i2); :}
	;

Function ::=
		Type:t id:i LPAREN RPAREN CompoundStmt:cs
		{: RESULT = new Function(0, (Type) t, (String) i, (CompoundStmt) cs); :}
	|	Type:t id:i LPAREN ParamList:pl RPAREN CompoundStmt:cs
		{: RESULT = new Function(0, (Type) t, (String) i, (ParamList) pl, (CompoundStmt) cs); :}
	;

ParamList ::=
		Type:t identifier:i
		{: ParamList pl = new ParamList(); pl.add((Type) t, (Identifier) i); RESULT = pl; :}
	|	ParamList:pl COMMA Type:t identifier:i
		{: ((ParamList) pl).add((Type) t, (Identifier) i); RESULT = pl; :}
	;

Type ::=
		INT
        {: RESULT = new Type(Type.type.INT); :}
	|	FLOAT
        {: RESULT = new Type(Type.type.FLOAT); :}
	;

CompoundStmt ::=
		LBRACE DeclList:dl StmtList:sl RBRACE
        {: RESULT = new CompoundStmt((DeclList) dl, (StmtList) sl); :}
	|	LBRACE StmtList:sl RBRACE
        {: RESULT = new CompoundStmt((StmtList) sl); :}
	;

StmtList ::=
		StmtList:sl Stmt:s
        {: ((StmtList) sl).add((Stmt) s); RESULT = (StmtList) sl; :}
	|	
        {: RESULT = new StmtList(); :}
	;

Stmt ::=
        OpenStmt:s
        {: RESULT = (Stmt) s; :}
    |   ClosedStmt:s
        {: RESULT = (Stmt) s; :}
    ;

OpenStmt ::=
		IF LPAREN Expr:cond RPAREN Stmt:thenBody
		{: RESULT = new IfStmt(0, (Exp) cond, (Stmt) thenBody); :}
    |   IF LPAREN Expr:cond RPAREN ClosedStmt:thenBody ELSE OpenStmt:elseBody
		{: RESULT = new IfStmt(0, (Exp) cond, (Stmt) thenBody, (Stmt) elseBody); :}
    |   WHILE LPAREN Expr:cond RPAREN OpenStmt:body
		{: RESULT = new WhileStmt(0, (Exp) cond, (Stmt) body, false); :}
	|	FOR LPAREN Assign:init SEMICOLON Expr:cond SEMICOLON Assign:post RPAREN OpenStmt:body
        {: RESULT = new ForStmt(0, (Assign) init, (Exp) cond, (Assign) post, (Stmt) body); :}
    ;

ClosedStmt ::=
        IF LPAREN Expr:cond RPAREN ClosedStmt:thenBody ELSE ClosedStmt:elseBody
		{: RESULT = new IfStmt(0, (Exp) cond, (Stmt) thenBody, (Stmt) elseBody); :}
    |   WHILE LPAREN Expr:cond RPAREN ClosedStmt:body
		{: RESULT = new WhileStmt(0, (Exp) cond, (Stmt) body, false); :}
	|	FOR LPAREN Assign:init SEMICOLON Expr:cond SEMICOLON Assign:post RPAREN ClosedStmt:body
        {: RESULT = new ForStmt(0, (Assign) init, (Exp) cond, (Assign) post, (Stmt) body); :}
	|	AssignStmt:stmt
        {: RESULT = (Stmt) stmt; :}
	|	CallStmt:stmt
        {: RESULT = (Stmt) stmt; :}
	|	RetStmt:stmt
        {: RESULT = (Stmt) stmt; :}
	|	WhileStmt:stmt
        {: RESULT = (Stmt) stmt; :}
	|	ForStmt:stmt
        {: RESULT = (Stmt) stmt; :}
	|	SwitchStmt:stmt
        {: RESULT = (Stmt) stmt; :}
	|	CompoundStmt:stmt
        {: RESULT = (Stmt) stmt; :}
    |   SEMICOLON
        {: RESULT = new EmptyStmt(0); :}
	;

AssignStmt ::=
		Assign:a SEMICOLON
    	{: RESULT = new AssignStmt(0, (Assign) a); :}
	;

Assign ::=
		id:i EQ Expr:e
        {: RESULT = new Assign(0, (String) i, (Exp) e); :}
	|	id:i LBRACK Expr:e1 RBRACK EQ Expr:e2
        {: RESULT = new Assign(0, (String) i, (Exp) e1, (Exp) e2); :}
	;

CallStmt ::=
		Call:e SEMICOLON
		{: RESULT = new CallStmt(0, (CallExp) e); :}
	;

Call ::=
		id:i LPAREN RPAREN
		{: RESULT = new CallExp(0, (String) i); :}
	|	id:i LPAREN ArgList:args RPAREN
		{: RESULT = new CallExp(0, (String) i, (ArgList) args); :}
	;

RetStmt ::=
		RETURN Expr:e SEMICOLON
		{: RESULT = new RetStmt(0, (Exp) e); :}
	|	RETURN SEMICOLON
		{: RESULT = new RetStmt(0); :}
	;

WhileStmt ::=
		DO Stmt:body WHILE LPAREN Expr:cond RPAREN SEMICOLON
		{: RESULT = new WhileStmt(0, (Exp) cond, (Stmt) body, true); :}
	;

SwitchStmt ::=
		SWITCH LPAREN identifier:id RPAREN LBRACE CaseList:cl RBRACE
        {: RESULT = new SwitchStmt((Identifier) id, (CaseList) cl); :}
	;

CaseList ::=
		CaseCont:cc Default:d
        {: ((CaseList) cc).setDefault((DefaultCase) d); RESULT = cc; :}
	|	CaseCont:cc
        {: RESULT = (CaseList) cc; :}
	|	Default:d
        {: CaseList cl = new CaseList(); cl.setDefault((DefaultCase) d); RESULT = cl; :}
	|
        {: CaseList cl = new CaseList(); RESULT = cl; :}
	;

CaseCont ::=
		CASE intnum:n COLON StmtList:sl
        {: Case c = new Case((int) n, (StmtList) sl, false); CaseList cl = new CaseList(); cl.add(c); RESULT = cl; :}
	|	CASE intnum:n COLON StmtList:sl BREAK SEMICOLON
        {: Case c = new Case((int) n, (StmtList) sl, true); CaseList cl = new CaseList(); cl.add(c); RESULT = cl; :}
	|	CaseCont:cl CASE intnum:n COLON StmtList :sl
        {: Case c = new Case((int) n, (StmtList) sl, false); ((CaseList) cl).add(c); RESULT = cl; :} 
	|	CaseCont:cl CASE intnum:n COLON StmtList:sl BREAK SEMICOLON
        {: Case c = new Case((int) n, (StmtList) sl, true); ((CaseList) cl).add(c); RESULT = cl; :} 
	;

Default ::=
		DEFAULT COLON StmtList:sl
        {: RESULT = new DefaultCase((StmtList) sl, false); :}
	|	DEFAULT COLON StmtList:sl BREAK SEMICOLON
        {: RESULT = new DefaultCase((StmtList) sl, true); :}
	;

Expr ::=
		MINUS Expr:e
		{: RESULT = new UnOpExp(0, UnOpExp.Op.MINUS, (Exp) e); :}
        %prec UMINUS
	|	Expr:e1 PLUS Expr:e2
		{: RESULT = new BinOpExp(0, (Exp) e1, BinOpExp.Op.PLUS, (Exp) e2); :}
	|	Expr:e1 MINUS Expr:e2
		{: RESULT = new BinOpExp(0, (Exp) e1, BinOpExp.Op.MINUS, (Exp) e2); :}
	|	Expr:e1 MULT Expr:e2
		{: RESULT = new BinOpExp(0, (Exp) e1, BinOpExp.Op.MULT, (Exp) e2); :}
	|	Expr:e1 DIV Expr:e2
		{: RESULT = new BinOpExp(0, (Exp) e1, BinOpExp.Op.DIV, (Exp) e2); :}
	|	Expr:e1 GT Expr:e2
		{: RESULT = new BinOpExp(0, (Exp) e1, BinOpExp.Op.GT, (Exp) e2); :}
	|	Expr:e1 LT Expr:e2
		{: RESULT = new BinOpExp(0, (Exp) e1, BinOpExp.Op.LT, (Exp) e2); :}
	|	Expr:e1 GTEQ Expr:e2
		{: RESULT = new BinOpExp(0, (Exp) e1, BinOpExp.Op.GTEQ, (Exp) e2); :}
	|	Expr:e1 LTEQ Expr:e2
		{: RESULT = new BinOpExp(0, (Exp) e1, BinOpExp.Op.LTEQ, (Exp) e2); :}
	|	Expr:e1 EQEQ Expr:e2
		{: RESULT = new BinOpExp(0, (Exp) e1, BinOpExp.Op.EQEQ, (Exp) e2); :}
	|	Expr:e1 NOTEQ Expr:e2
		{: RESULT = new BinOpExp(0, (Exp) e1, BinOpExp.Op.NOTEQ, (Exp) e2); :}
	|	Call:c
		{: RESULT = (Exp) c; :}
	|	intnum:i
		{: RESULT = new IntExp(0, (Integer) i); :}
	|	floatnum:f
		{: RESULT = new FloatExp(0, (Float) f); :}
	|	id:s
    	{: RESULT = new IdExp(0, (String) s); :}
	|	id:i LBRACK Expr:e RBRACK
    	{: RESULT = new ArrayExp(0, (String) i, (Exp) e); :}
	|	LPAREN Expr:e RPAREN
		{: RESULT = (Exp) e; :}
	;

ArgList ::=
		Expr:e
        {: ArgList al = new ArgList(); al.add((Exp) e); RESULT = al; :}
	|	ArgList:al COMMA Expr:e
        {: ((ArgList) al).add((Exp) e); RESULT = (ArgList) al; :}
	;
